Notes on NaClSsh:

The connection is in file ssh_plugin.cc.  The basic protocol is as
follows:

1. libssh2_init(0)

   Reference:
   http://www.libssh2.org/libssh2_init.html

   Declarations:
   #include <libssh2.h>

   #define LIBSSH2_INIT_NO_CRYPTO 0x0001

   int libssh2_init(int flags);

   Description:
   Initialize the libssh2 functions. This typically initialize the
   crypto library. It uses a global state, and is not thread safe --
   you must make sure this function is not called concurrently.

   Returns 0 on success.


2. libssh2_session_init()

   LIBSSH2_SESSION *session;
   session = libssh2_session_init();

   Reference:
   http://www.libssh2.org/libssh2_session_init.html

   Declaration:
   #include <libssh2.h>

   libssh2_session_init(arguments)

   Description:
   This is a specialization of libssh2_session_init_ex():

   Reference:
   http://www.libssh2.org/libssh2_session_init_ex.html

   Declaration:
   #include <libssh2.h>

   LIBSSH2_SESSION *
   libssh2_session_init_ex(LIBSSH2_ALLOC_FUNC((*myalloc)),
   LIBSSH2_FREE_FUNC((*myfree)), LIBSSH2_REALLOC_FUNC((*myrealloc)), void
   *abstract);

   LIBSSH2_SESSION * libssh2_session_init(void);

   Description:
   myalloc - Custom allocator function. Refer to the section on Callbacks
   for implementing an allocator callback. Pass a value of NULL to use
   the default system allocator.

   myfree - Custom de-allocator function. Refer to the section on
   Callbacks for implementing a deallocator callback. Pass a value of
   NULL to use the default system deallocator.

   myrealloc - Custom re-allocator function. Refer to the section on
   Callbacks for implementing a reallocator callback. Pass a value of
   NULL to use the default system reallocator.

   abstract - Arbitrary pointer to application specific callback
   data. This value will be passed to any callback function associated
   with the named session instance.

   Initializes an SSH session object. By default system memory allocators
   (malloc(), free(), realloc()) will be used for any dynamically
   allocated memory blocks. Alternate memory allocation functions may be
   specified using the extended version of this API call, and/or optional
   application specific data may be attached to the session object.

   This method must be called first, prior to configuring session options
   or starting up an SSH session with a remote server.

   Returns NULL on errors.


3. libssh2_session_set_blocking(session, 0);

   Reference:
   http://www.libssh2.org/libssh2_session_set_blocking.html    

   Declaration:
   #include <libssh2.h>

   void libssh2_session_set_blocking(LIBSSH2_SESSION *session, int blocking);

   Description:
   session - session instance as returned by libssh2_session_init_ex(3)

   blocking - Set to a non-zero value to make the channel block, or zero
   to make it non-blocking.

   Set or clear blocking mode on the selected on the session. This will
   instantly affect any channels associated with this session. If a read
   is performed on a session with no data currently available, a blocking
   session will wait for data to arrive and return what it receives. A
   non-blocking session will return immediately with an empty buffer. If
   a write is performed on a session with no room for more data, a
   blocking session will wait for room. A non-blocking session will
   return immediately without writing anything.


4. libssh2_session_startup(session, sock);

   Reference:
   http://linux.die.net/man/3/libssh2_session_startup

   Description:
   session - Session instance as returned by libssh2_session_init(3)
   socket - Connected socket descriptor. Typically a TCP connection
   though the protocol allows for any reliable transport and the library
   will attempt to use any berkeley socket.

   Begin transport layer protocol negotiation with the connected host.

   Returns 0 on success; negative on failure.

   Notes:
   In NaClSsh, sock is

   int sock = 1;

   I presume that is STDOUT, file descriptor 1.

   Examples:

   In Polkit on Google Code (objective C):
   _socket = _CreateSocketConnectedToHost([url host],
					  ([url port] ? [[url port] unsignedShortValue] :
					   kDefaultSSHPort), kCFSocketNoCallBack, NULL, NULL);
   libssh2_session_startup(_session, CFSocketGetNative(_socket));
     

   In tenderlove/mallcop on GitHub:

   static VALUE start(VALUE self, VALUE sock)
   {
     LIBSSH2_SESSION *session;
     rb_io_t *fptr;

     Data_Get_Struct(self, LIBSSH2_SESSION, session);

     GetOpenFile(sock, fptr);

     return INT2FIX(libssh2_session_startup(session, fptr->fd));
   }


5. libssh2_userauth_password(session, userdata->username.c_str(), userdata->password.c_str())

   Reference:
   http://www.libssh2.org/libssh2_userauth_password.html

   Declaration:
   #include <libssh2.h>

   libssh2_userauth_password(arguments)

   Description:
   This is a macro defined in a public libssh2 header file that is using the
   underlying function libssh2_userauth_password_ex(3).

   Reference:
   http://www.libssh2.org/libssh2_userauth_password_ex.html

   Declaration:
   #include <libssh2.h>

   int libssh2_userauth_password_ex(LIBSSH2_SESSION *session,
				    const char *username,
				    unsigned int username_len,
				    const char *password,
				    unsigned int password_len,
				    LIBSSH2_PASSWD_CHANGEREQ_FUNC((*passwd_change_cb)));


   #define libssh2_userauth_password(session, username, password)
     libssh2_userauth_password_ex((session), (username),
				  strlen(username),
				  (password), strlen(password), NULL)


   Description:
   session - Session instance as returned by libssh2_session_init_ex(3)

   username - Name of user to attempt plain password authentication for.

   username_len - Length of username parameter.

   password - Password to use for authenticating username.

   password_len - Length of password parameter.

   passwd_change_cb - If the host accepts authentication but requests
   that the password be changed, this callback will be issued. If no
   callback is defined, but server required password change,
   authentication will fail.

   Attempt basic password authentication. Note that many SSH servers
   which appear to support ordinary password authentication actually
   have it disabled and use Keyboard Interactive authentication
   (routed via PAM or another authentication backed) instead.

   Return 0 on success or negative on failure.  It returns
   LIBSSH2_ERROR_EAGAIN when it would otherwise block. While
   LIBSSH2_ERROR_EAGAIN is a negative number, it isn't really a
   failure per se.


6. channel = libssh2_channel_open_session(session);

   Reference:
   http://www.libssh2.org/libssh2_channel_open_session.html

   Declaration:
   #include <libssh2.h>

   libssh2_channel_open_session(arguments)


   Description:

   This is a macro defined in a public libssh2 header file that is using
   the underlying function libssh2_channel_open_ex(3).

   Reference:
   http://www.libssh2.org/libssh2_channel_open_ex.html

   Declaration:
   #include <libssh2.h>

   LIBSSH2_CHANNEL * libssh2_channel_open_ex(LIBSSH2_SESSION *session,
                                             const char *channel_type,
                                             unsigned int channel_type_len,
                                             unsigned int window_size,
                                             unsigned int packet_size,
                                             const char *message,
					     unsigned int message_len);

   LIBSSH2_CHANNEL * libssh2_channel_open_session(session);

   Description:
   session - Session instance as returned by libssh2_session_init_ex(3)

   channel_type - Channel type to open. Typically one of session,
   direct-tcpip, or tcpip-forward. The SSH2 protocol allowed for
   additional types including local, custom channel types.

   channel_type_len - Length of channel_type

   window_size - Maximum amount of unacknowledged data remote host is
   allowed to send before receiving an SSH_MSG_CHANNEL_WINDOW_ADJUST
   packet.

   packet_size - Maximum number of bytes remote host is allowed to send
   in a single SSH_MSG_CHANNEL_DATA or SSG_MSG_CHANNEL_EXTENDED_DATA
   packet.

   message - Additional data as required by the selected channel_type.

   message_len - Length of message parameter.

   Allocate a new channel for exchanging data with the server. This
   method is typically called through its macroized form:
   libssh2_channel_open_session(3) or via libssh2_channel_direct_tcpip(3)
   or libssh2_channel_forward_listen(3)




    
Security:

1. Enforce same origin policy by default; allow exceptions. [client]
2. Require password entry by default; allow use of stored keys. [client]
3. Grant all services by default; allow refuse all, exceptions. [remote]


Drawing a Plugin In Unix

https://developer.mozilla.org/en/Gecko_Plugin_API_Reference/Drawing_and_Event_Handling

Unix

On Unix, the browser creates a Motif Drawing Area widget for the
instance and passes the window ID of the widget in the window field of
NPWindow. Additionally, the browser creates an
NPSetWindowCallbackStruct object and passes it in the ws_info field of
NPWindow. As on Windows, the plug-in can receive all events for the
instance, in this case through the widget. If the plug-in needs to
receive periodic time messages, it should install a timer or fork a
thread.

...

Unix/X11

The plug-in receives a GraphicsExpose event. The XGraphicsExposeEvent
structure contains the Xlib Drawable (which is an offscreen Pixmap),
its Display, and the dirty rectangle (optional clip rectangle)
specified relative to the top-left corner of the drawable.

The plugin should draw to the Drawable with the offset specified in
the x and y members of the NPWindow structure, with the clip rectangle
specified in the clipRect member, and with the Visual and Colormap
specified in the ws_info member.

