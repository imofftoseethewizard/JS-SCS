Security

1. Enforce same origin policy by default; allow exceptions. [client]
2. Require password entry by default; allow use of stored keys. [client]
3. Grant all services by default; allow refuse all, exceptions. [remote]


Drawing a Plugin In Unix

https://developer.mozilla.org/en/Gecko_Plugin_API_Reference/Drawing_and_Event_Handling

Unix

On Unix, the browser creates a Motif Drawing Area widget for the
instance and passes the window ID of the widget in the window field of
NPWindow. Additionally, the browser creates an
NPSetWindowCallbackStruct object and passes it in the ws_info field of
NPWindow. As on Windows, the plug-in can receive all events for the
instance, in this case through the widget. If the plug-in needs to
receive periodic time messages, it should install a timer or fork a
thread.

...

Unix/X11

The plug-in receives a GraphicsExpose event. The XGraphicsExposeEvent
structure contains the Xlib Drawable (which is an offscreen Pixmap),
its Display, and the dirty rectangle (optional clip rectangle)
specified relative to the top-left corner of the drawable.

The plugin should draw to the Drawable with the offset specified in
the x and y members of the NPWindow structure, with the clip rectangle
specified in the clipRect member, and with the Visual and Colormap
specified in the ws_info member.


FireBreath Drawing:

1. Add a refresh event handler to your plugin's object:

  BEGIN_PLUGIN_EVENT_MAP()
  ...
  EVENTTYPE_CASE(FB::RefreshEvent, onRefresh, FB::PluginWindow)
  ...
  END_PLUGIN_EVENT_MAP()


2. Write the refresh handler:



Open Connection UI Protocol

When a script calls the open method of a SecureConnection object, the plugin
fires events to notify the script when the plugin will request credentials
from the user.  This allows the script to make UI changes if desired.

Script                        Plugin
------------------------------------------------------------------------------
connection.open()

			      FireEvent("onreadystatechange", ..., OPENING)

Can inform the user that the connection has
begun to open.

			      Connection requests UI from plugin.
			      Connection receives UI from plugin.
			      FireEvent("onrequestcredentials", connection)

Can set css attributes on the embeded object, or
call the setAttribute method of the connection
object to reflect that input is expected.

			      Waits for the user to press enter or cancel.

			      -- either --
			      
			      FireEvent("onreceivedcredentials", connection)

			      -- or --

			      FireEvent("oncanceledrequest", connection)

			      --

Can set css attributes on the embeded object, or
call the setAttribute method of the connection
object to reflect that input is completed.

			      (If another connection is waiting for the UI, it
			      will now have its request filled.)

			      Plugin attempts to use credentials to begin SSL
			      session on behalf of user at remote host

			      -- either --

			      FireEvent("onreadystatechange", ..., OPEN)

Can inform the user that the connection is open.

                              -- or --

			      FireEvent("onerror", ...)

Can inform user of error.
    
			      FireEvent("onreadystatechange", ..., CLOSING)
			      
			      Plugin cleans up resources and shuts down
			      whatever SSL resources were successfully
			      obtained.

			      FireEvent("onreadystatechange", ..., CLOSED)

    			      --
	
Because a single plugin object may manage the UI for several different
connections and because of the asyncronous nature of Javascript, it is
necessary to maintain a thread-safe queue of connections that wish to request
credentials from the user.  (In practice this queue will nearly always be
empty or have only one element in it.)  On open, the connection schedules
itself with the plugin for the use of the UI.  UI requests are handled
sequentially in the order they are received, with the earlier request
completing with either an enter or an escape before the later request is
shown.

The UI request queue should be scheduled from the main thread.  The plugin
provides a public method that calls a private method on the main thread to add
a request to the queue.  If the queue is empty and the UI is available then
the request is not queued but dispatched directly; otherwise, the request is
queued.  When the UI signals that the user has pressed either enter or cancel,
then a private method on the main thread is called.  It notifies the
connection of the result, either with the password or an indication that the
request was canceled.  If there is a request waiting in the queue, it is then
handled.

New methods on HostServicesPlugin

private void setEnableUIButtons(bool enable)

Enables or disables the UI buttons according to its argument.

private void setCurrentConnection(SecureConnectionPtr connection)

Updates the m_connection member.  If the connection is NULL, then disables the
UI buttons and clears the labels.  If the connection is not NULL, then enables
the UI buttons and sets the label with the userName and hostName properties
from the connection.  Notify the connection that it is receiving the UI.

private void releaseUI()

** This must run on the main thread only.** It checks the UI request queue,
and if it is not empty, it takes the oldest item and makes that the new
current credential request; if the queue is empty, it clears the current
request.  Never fails or throws.

private void requestUI(SecureConnectionPtr connection)

** This must run on the main thread only. ** If the UI is not in use, then
make the request the current request. If the UI is in use, add the request to
the queue.  Never fails or throws.

public void scheduleUIRequest(SecureConnectionPtr connection)

Schedules the request on the main thread.  Never fails or throws.

protected void scheduleUIRelease(bool ok, const std::string& password)

This is called by the signal handler for each of the buttons in the UI.  It
notifies the connection of the user's response: either that the request was
canceled, or the password provided by the user.  Disables the UI buttons.
Never fails of throws.

private void setUILabels(const std::string& hostName, const std::string& userName)

Fills in the label template and puts the text in the label.

private SecureConnectionPtr current_connection

A member which is non-NULL when the UI is in use; holds the connection for
which the UI is currently requesting credentials.

private std::deque<SecureConnectionPtr> request_queue

The request queue. Changes to the queue are only allowed from the main thread.

private void cancelButtonPressed()

Signal handler for the cancel button.  Clear the entry.  Call
scheduleUIRelease(false, "").

private void okButtonPressed()

Signal handler for the ok button.  Get the text from the entry; clear the
entry. Call scheduleUIRelease(true, password).

private std::string getEntryText()

Gets the text from the password entry.

private void clearEntryText()

Clears the text in the password entry.





Default UI For Plugin

GTK+

  VBox
    Label: 'Password for <userName>@<hostName>'
    Entry (password)
    HBox
      Button Stock OK
      Button Stock Cancel



Design Questions:

2. Why is the X11 default to add a drawing widget to the plug?

3. Are there any X11 UI examples?
